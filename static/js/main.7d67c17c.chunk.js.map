{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","React","memo","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","query","changeHandler","toFindMovie","movieNotFounded","addMovie","useState","isLoading","setLoading","submitHandler","e","a","onSubmit","htmlFor","name","type","id","placeholder","value","onChange","classNames","disabled","onClick","getMovie","fetch","then","res","json","catch","Response","Error","App","setMovies","setQuery","submitedQuery","setSubmitedQuery","findedMovie","setFindedMovie","setMovieNotFounded","preventDefault","Title","useMemo","Plot","Poster","imdbID","useEffect","currentTarget","find","currMovie","currList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d67c17c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = React.memo(({ movie }) => {\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={\n              movie.imgUrl !== 'N/A'\n                ? movie.imgUrl\n                : 'https://via.placeholder.com/360x270.png?text=no%20preview'\n            }\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {movie.description}\n          <br />\n          <a href={movie.imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  query: string;\n  changeHandler: (e: React.FormEvent<HTMLInputElement>) => void;\n  movie: Movie | null;\n  toFindMovie: (e: React.FormEvent<HTMLFormElement>) => void;\n  movieNotFounded: boolean;\n  addMovie: () => void;\n};\n\nexport const FindMovie: React.FC<Props> = React.memo(({\n  query, changeHandler, movie, toFindMovie, movieNotFounded, addMovie,\n}) => {\n  const [isLoading, setLoading] = useState(false);\n  const submitHandler = async (e: React.FormEvent<HTMLFormElement>) => {\n    setLoading(true);\n    await toFindMovie(e);\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={submitHandler}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              name=\"input\"\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={changeHandler}\n            />\n          </div>\n\n          {movieNotFounded && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': isLoading === true,\n              })}\n              // eslint-disable-next-line no-unneeded-ternary\n              disabled={query === '' ? true : false}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {!!movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      <div className=\"container\" data-cy=\"previewContainer\">\n        {!!movie && (\n          <>\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard movie={movie} />\n          </>\n        )}\n      </div>\n    </>\n  );\n});\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=a6935f15';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState, useMemo, useEffect } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport { MovieData } from './types/MovieData';\n// import { ResponseError } from './types/ReponseError';\n\nimport { getMovie } from './api';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [query, setQuery] = useState('');\n  const [submitedQuery, setSubmitedQuery] = useState('');\n  const [findedMovie, setFindedMovie] = useState<MovieData | null>(null);\n  const [movieNotFounded, setMovieNotFounded] = useState(false);\n\n  const changeHandler = (e: React.FormEvent<HTMLInputElement>) => {\n    setQuery(e.currentTarget.value);\n  };\n\n  const toFindMovie = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const movie = await getMovie(query) as MovieData;\n\n    if (movie.Title) {\n      setFindedMovie(movie);\n      setMovieNotFounded(false);\n      setSubmitedQuery(query);\n    } else {\n      setMovieNotFounded(true);\n    }\n  };\n\n  const movie = useMemo(() => {\n    if (!findedMovie) {\n      return null;\n    }\n\n    return {\n      title: findedMovie.Title,\n      description: findedMovie.Plot,\n      imgUrl: findedMovie.Poster,\n      imdbUrl: `https://www.imdb.com/title/${findedMovie.imdbID}`,\n      imdbId: findedMovie.imdbID,\n    };\n  }, [submitedQuery, query]);\n\n  const addMovie = () => {\n    if (movie) {\n      const isMoviePresent = movies.find(\n        currMovie => currMovie.imdbId === movie.imdbId,\n      );\n\n      if (!isMoviePresent) {\n        setMovies(currList => {\n          return [\n            ...currList,\n            movie,\n          ];\n        });\n      }\n\n      setFindedMovie(null);\n      setQuery('');\n      setSubmitedQuery('');\n    }\n  };\n\n  useEffect(() => {\n    setFindedMovie(null);\n    setMovieNotFounded(false);\n    setSubmitedQuery('');\n  }, [query]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          query={query}\n          changeHandler={changeHandler}\n          movie={movie}\n          toFindMovie={toFindMovie}\n          movieNotFounded={movieNotFounded}\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}